{
	// Place your f2rs workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	"section-ref": {
		"scope": "rust",
		"prefix": "section-ref",
		"body": [
			"// ยง$1"
		],
		"description": "paragraph"
	},
	"rule-ref": {
		"scope": "rust",
		"prefix": "rule-ref",
		"body": [
			"// R$1"
		],
		"description": "paragraph"
	},
	"clause-ref": {
		"scope": "rust",
		"prefix": "clause-ref",
		"body": [
			"// C$1"
		],
		"description": "paragraph"
	},
	"compatibility": {
		"scope": "rust",
		"prefix": "compatibility",
		"body": [
			"dbg_compatible_with!(",
			"	cfg,",
			"	$1,",
			");",
			"$0",
		]
	},
	"parse-rule": {
		"scope": "rust",
		"prefix": "parse-rule",
		"body": [
			"// TODO test",
			"pub fn $1<'a, S: TextSource + 'a>(cfg: &'a Cfg) -> impl Parser<S, Token = $2<S::Span>, S> {",
			"	dbg_compatible_with!(",
			"		cfg,",
			"		$3, // R$4",
			"	);",
			"",
			"	|_| todo!(\"TODO: parser not implemented yet\")$0",
			"}",
		]
	},
	"syntax-rule": {
		"scope": "rust",
		"prefix": "syntax-rule",
		"body": [
			"#[syntax_rule("
			"    F18V007r1 rule \"$3\" #$4,",
			")]",
			"pub fn $1<'a, S: TextSource + 'a>(cfg: &'a Cfg) -> impl Parser<S, Token = $2<S::Span>, S> {",
			"    |_| todo!(\"TODO: \\\"$1\\\" parser not implemented yet\")$0",
			"}",
		]
	}
	"syntax-rule-header": {
		"scope": "rust",
		"prefix": "syntax-rule-header",
		"body": [
			"#[syntax_rule("
			"    F18V007r1 rule \"$1\" #$2,",
			")]",
		]
	}
	"parse-module": {
		"scope": "rust",
		"prefix": "parse-module",
		"body": [
			"use super::*;",
			"",
			"$0",
			"",
			"#[cfg(test)]",
			"mod test {",
			"    use crate::panics_for_invalid;",
			"    use super::*;",
			"",
			"}",
		]
	},
}