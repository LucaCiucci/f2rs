
pub trait FortranPow<Rhs> {
    type Output;
    fn fortran_pow(self, rhs: Rhs) -> Self::Output;
}

macro_rules! impl_fortran_pow {
    (pow!($l:ty, $r:ty) => $f:ident($l_casted:ty, $r_casted:ty) : $o:ty) => {
        impl FortranPow<$r> for $l {
            type Output = $o;
            fn fortran_pow(self, rhs: $r) -> Self::Output {
                (self as $l_casted).$f(rhs as $r_casted) as Self::Output
            }
        }
        impl FortranPow<&$r> for $l {
            type Output = $o;
            fn fortran_pow(self, rhs: &$r) -> Self::Output {
                (self as $l_casted).$f(*rhs as $r_casted) as Self::Output
            }
        }
        impl FortranPow<$r> for &$l {
            type Output = $o;
            fn fortran_pow(self, rhs: $r) -> Self::Output {
                (*self as $l_casted).$f(rhs as $r_casted) as Self::Output
            }
        }
        impl FortranPow<&$r> for &$l {
            type Output = $o;
            fn fortran_pow(self, rhs: &$r) -> Self::Output {
                (*self as $l_casted).$f(*rhs as $r_casted) as Self::Output
            }
        }
    };
}

#[macro_export]
macro_rules! pow {
    ($base:expr, $exponent:expr) => {
        $crate::pow_operation::FortranPow::fortran_pow($base, $exponent);
    };
}

// TODO check that all of the lines below are in accordance with the Fortran standard
// We implement has follows:
// - we have a left hand side type and a right hand side type. What happens when, in Fortran
//   we encounter a `**` operator between these two types?
// - we cast the types tho the correct type and apply the correct function.
// As an example, if `a` is `i32` and `b` is `f64`, we have:
// `impl_fortran_pow!(<i32 => f64> ** <f64 => f64> : powf => f64);`

// TODO all these impls are not correct (generated by copilot), we need to check the Fortran standard


impl_fortran_pow!(pow!(u8, u8) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, i8) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, u16) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, i16) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, u32) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, i32) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, u64) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, i64) => pow(u64, u32) : u64);
impl_fortran_pow!(pow!(u8, u128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u8, i128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u8, usize) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, isize) => pow(u8, u32) : u32);
impl_fortran_pow!(pow!(u8, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(u8, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(i8, u8) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, i8) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, u16) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, i16) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, u32) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, i32) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, u64) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, i64) => pow(i8, u32) : u64);
impl_fortran_pow!(pow!(i8, u128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i8, i128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i8, usize) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, isize) => pow(i8, u32) : u32);
impl_fortran_pow!(pow!(i8, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(i8, f64) => powf(f64, f64) : f64);


impl_fortran_pow!(pow!(u16, u8) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, i8) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, u16) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, i16) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, u32) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, i32) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, u64) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, i64) => pow(u16, u32) : u64);
impl_fortran_pow!(pow!(u16, u128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u16, i128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u16, usize) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, isize) => pow(u16, u32) : u32);
impl_fortran_pow!(pow!(u16, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(u16, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(i16, u8) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, i8) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, u16) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, i16) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, u32) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, i32) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, u64) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, i64) => pow(i16, u32) : u64);
impl_fortran_pow!(pow!(i16, u128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i16, i128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i16, usize) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, isize) => pow(i16, u32) : u32);
impl_fortran_pow!(pow!(i16, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(i16, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(u32, u8) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, i8) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, u16) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, i16) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, u32) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, i32) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, u64) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, i64) => pow(u32, u32) : u64);
impl_fortran_pow!(pow!(u32, u128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u32, i128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u32, usize) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, isize) => pow(u32, u32) : u32);
impl_fortran_pow!(pow!(u32, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(u32, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(i32, u8) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, i8) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, u16) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, i16) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, u32) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, i32) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, u64) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, i64) => pow(i32, u32) : u64);
impl_fortran_pow!(pow!(i32, u128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i32, i128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i32, usize) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, isize) => pow(i32, u32) : u32);
impl_fortran_pow!(pow!(i32, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(i32, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(u64, u8) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, i8) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, u16) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, i16) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, u32) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, i32) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, u64) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, i64) => pow(u64, u32) : u64);
impl_fortran_pow!(pow!(u64, u128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u64, i128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u64, usize) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, isize) => pow(u64, u32) : u32);
impl_fortran_pow!(pow!(u64, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(u64, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(i64, u8) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, i8) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, u16) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, i16) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, u32) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, i32) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, u64) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, i64) => pow(i64, u32) : u64);
impl_fortran_pow!(pow!(i64, u128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i64, i128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i64, usize) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, isize) => pow(i64, u32) : u32);
impl_fortran_pow!(pow!(i64, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(i64, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(u128, u8) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, i8) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, u16) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, i16) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, u32) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, i32) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, u64) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, i64) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, u128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, i128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, usize) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, isize) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(u128, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(u128, f64) => powf(f64, f64) : f64);


impl_fortran_pow!(pow!(i128, u8) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, i8) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, u16) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, i16) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, u32) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, i32) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, u64) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, i64) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, u128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, i128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, usize) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, isize) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(i128, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(i128, f64) => powf(f64, f64) : f64);


impl_fortran_pow!(pow!(usize, u8) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, i8) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, u16) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, i16) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, u32) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, i32) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, u64) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, i64) => pow(usize, u32) : u64);
impl_fortran_pow!(pow!(usize, u128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(usize, i128) => pow(u128, u32) : u128);
impl_fortran_pow!(pow!(usize, usize) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, isize) => pow(usize, u32) : u32);
impl_fortran_pow!(pow!(usize, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(usize, f64) => powf(f64, f64) : f64);


impl_fortran_pow!(pow!(isize, u8) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, i8) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, u16) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, i16) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, u32) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, i32) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, u64) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, i64) => pow(isize, u32) : u64);
impl_fortran_pow!(pow!(isize, u128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(isize, i128) => pow(i128, u32) : u128);
impl_fortran_pow!(pow!(isize, usize) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, isize) => pow(isize, u32) : u32);
impl_fortran_pow!(pow!(isize, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(isize, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(f32, u8) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, i8) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, u16) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, i16) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, u32) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, i32) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, u64) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, i64) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, u128) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, i128) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, usize) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, isize) => powi(f32, i32) : f32);
impl_fortran_pow!(pow!(f32, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(f32, f64) => powf(f64, f64) : f64);

impl_fortran_pow!(pow!(f64, u8) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, i8) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, u16) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, i16) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, u32) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, i32) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, u64) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, i64) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, u128) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, i128) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, usize) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, isize) => powi(f64, i32) : f64);
impl_fortran_pow!(pow!(f64, f32) => powf(f32, f32) : f32);
impl_fortran_pow!(pow!(f64, f64) => powf(f64, f64) : f64);